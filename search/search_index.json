{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A32NX Documentation Start flying with our Installation Guide . Introduction The A32NX Project is a community-driven open source project to create a free Airbus A320neo in Microsoft Flight Simulator that is as close to reality as possible. It aims to enhance the default A320neo by improving the systems depth and functionality to bring it up to payware-level, all for free. Aircraft Configuration(s) The following aircraft configurations are currently simulated: Model A320-251N Engine LEAP 1A-2A FMGS Honeywell Pegasus Step 1A FWC Std. H2F9C GitHub and Support Below you can find links to our GitHub and Discord where we provide support, accept bug/feature requests, and host the source code to the A32NX mod. If you need support or are interested in contributing to the mod please use the links below. - Discord Link - GitHub A32NX Repository - Issues / Feature Requests","title":"Home"},{"location":"#a32nx-documentation","text":"Start flying with our Installation Guide .","title":"A32NX Documentation"},{"location":"#introduction","text":"The A32NX Project is a community-driven open source project to create a free Airbus A320neo in Microsoft Flight Simulator that is as close to reality as possible. It aims to enhance the default A320neo by improving the systems depth and functionality to bring it up to payware-level, all for free. Aircraft Configuration(s) The following aircraft configurations are currently simulated: Model A320-251N Engine LEAP 1A-2A FMGS Honeywell Pegasus Step 1A FWC Std. H2F9C","title":"Introduction"},{"location":"#github-and-support","text":"Below you can find links to our GitHub and Discord where we provide support, accept bug/feature requests, and host the source code to the A32NX mod. If you need support or are interested in contributing to the mod please use the links below. - Discord Link - GitHub A32NX Repository - Issues / Feature Requests","title":"GitHub and Support"},{"location":"donate/","text":"PlaceHolder","title":"Donate"},{"location":"a32nx-dev/html/","text":"A32NX HTML/JS Development Code Structure This is a placeholder. Core Files This is another placeholder. Optimization Placeholder","title":"HTML/JS Code"},{"location":"a32nx-dev/html/#a32nx-htmljs-development","text":"","title":"A32NX HTML/JS Development"},{"location":"a32nx-dev/html/#code-structure","text":"This is a placeholder.","title":"Code Structure"},{"location":"a32nx-dev/html/#core-files","text":"This is another placeholder.","title":"Core Files"},{"location":"a32nx-dev/html/#optimization","text":"Placeholder","title":"Optimization"},{"location":"a32nx-dev/overview/","text":"FlyByWire Development Guide Overview Introduction This guide has the objective of teaching you how to contribute efficiently to the FlyByWire A32NX project. You will learn how to: Setup a functional development environment Get familiar with the technologies involved Understand our build process Integrate into our development cycle and best practices Setting up a development environment Working on the addon will require at a minimum the following software: A code editor (with at least syntax highlighting, search and replace, and support for workspaces) A git client (along with any editor integrations of your choice) Docker Desktop (either WSL2 or HyperV backend work, but the latter is faster) Most of our team works with either Visual Studio Code or IntelliJ IDEA-based IDEs for development. Obviously, your choice is yours as long as the resulting code conforms to our standards. Used technologies Our tech stack includes the following: Systems development for aircraft uses Rust and the msfs-rs library Avionics programming is done using JavaScript or TypeScript (depending on the project), with the React.js rendering library. Front-end web or desktop app development uses the same technologies outlined above Server-side development uses nest.js for the API and MySQL for the database backend Knowledge of all items on this list is obviously not necessary, but this can hopefully give you a better insight into what your skills can fit into. Build process Due to how Microsoft Flight Simulator package building works, it is necessary for us to maintain our own bespoke build tools. The high-level goal of the build process is to eventually have all code in the src/ directory. Commonly, the following items will be found in the source: - src/ - instruments/ Avionics code built using the rollup config - rollup.config.js - behavior/ Compiled and verified ModelBehavior code - model/ Model source files to be merged at build time - <directories for systems> Rust/C++ source code for systems ... more to come Each directory will usually contain a build.js/build.sh file that is called from a central build script located in scripts/build.sh . A Docker container is used to ship pre-configured build environments to developers. It contains necessary library headers and compilers, and requires no user intervention at all. This build process is optimized to be run in cloud CI pipelines on GitHub Actions. This allows us to automatically distribute development master builds to thousands of users without any manual intervention. It lets the team deploy critical fixes to production in a matter of minutes. The automatic CI pipeline is sometimes manually added to other branches in order to provide the community with experimental versions. An automatic system that allows us to enable CI for specific branches might be considered in the future. Development practices FlyByWire Simulations aims to maintain professional standards as well as industry-wide best practices in order to maximize developer productivity and deliver high-quality, tested products. This is why we adopt a set of rules and practices that create a strong framework, not only around the usage of git but also surrounding code quality. Version control Our version control approach maintains the following guidelines: Commit messages should be short and to the point. The Angular commit message convention is often used and recommended but not enforced at the moment Merge commits are discouraged in commit histories and disallowed when merging pull requests Squash commits are exclusively used for pull request merges One approving review from a maintainer is required to merge a pull request Positive reports from a number of QA testers (varies depending on the PR scope and size) are required before merging, unless a maintainer judges appropriate to bypass this rule Creation of draft pull requests is required when a developer wishes to get working on a project, to avoid duplicate PR situations Code quality Code quality is of an utmost importance as it allows other developers to more easily find bugs and understand logic. An ESLint configuration is provided and should cover most code style rules. A few guidelines apply: Prefer self-documenting code over having to write tons of comments However, do not hesitate to write comments when complex logic is used Use language-specific docstring tools (JSDoc, rustdoc) Maintain separation of concerns Do not be afraid to separate code into logical blocks, even if resulting sub-functions are only used locally (while maintaining a reasonable limit) Avoid polling - prefer reactive APIs (but remain sure of not introducing state that cannot be externally read) Avoid introducing new technologies/languages without talking with the development team Additionally, a few practices are straight up forbidden: Do not use async/await without a good reason (it does not make code run faster unless you are calling threaded APIs like fetch ) Do not use hungarian notation (b, m, g identifier prefixes) Do not perform business logic calculations in presentation code Reference material Creating a high-fidelity aircraft is a serious task that requires focus and dedication. But more importantly, it's a strive for accuracy and realism. Therefore, any change that affects the appearance or behavior of a plane needs to reference real documentation. The maintainer team has the role of deciding if references are suitable for a change. It is understandable that new developers do not have access to in-depth resource material. While material like that is generally not in the possession of new contributors, the development team is always available to confirm your changes or provide you with necessary info. Our extensive pool of IRL A320/A380 pilots and aircraft maintenance engineers are also able to answer your questions whenever needed. Useful tools A number of tools make development in Microsoft Flight Simulator easier. msfs-webui-devkit - simple avionics overlay allowing cache-breaking live reload and basic console view","title":"Overview"},{"location":"a32nx-dev/overview/#flybywire-development-guide-overview","text":"","title":"FlyByWire Development Guide Overview"},{"location":"a32nx-dev/overview/#introduction","text":"This guide has the objective of teaching you how to contribute efficiently to the FlyByWire A32NX project. You will learn how to: Setup a functional development environment Get familiar with the technologies involved Understand our build process Integrate into our development cycle and best practices","title":"Introduction"},{"location":"a32nx-dev/overview/#setting-up-a-development-environment","text":"Working on the addon will require at a minimum the following software: A code editor (with at least syntax highlighting, search and replace, and support for workspaces) A git client (along with any editor integrations of your choice) Docker Desktop (either WSL2 or HyperV backend work, but the latter is faster) Most of our team works with either Visual Studio Code or IntelliJ IDEA-based IDEs for development. Obviously, your choice is yours as long as the resulting code conforms to our standards.","title":"Setting up a development environment"},{"location":"a32nx-dev/overview/#used-technologies","text":"Our tech stack includes the following: Systems development for aircraft uses Rust and the msfs-rs library Avionics programming is done using JavaScript or TypeScript (depending on the project), with the React.js rendering library. Front-end web or desktop app development uses the same technologies outlined above Server-side development uses nest.js for the API and MySQL for the database backend Knowledge of all items on this list is obviously not necessary, but this can hopefully give you a better insight into what your skills can fit into.","title":"Used technologies"},{"location":"a32nx-dev/overview/#build-process","text":"Due to how Microsoft Flight Simulator package building works, it is necessary for us to maintain our own bespoke build tools. The high-level goal of the build process is to eventually have all code in the src/ directory. Commonly, the following items will be found in the source: - src/ - instruments/ Avionics code built using the rollup config - rollup.config.js - behavior/ Compiled and verified ModelBehavior code - model/ Model source files to be merged at build time - <directories for systems> Rust/C++ source code for systems ... more to come Each directory will usually contain a build.js/build.sh file that is called from a central build script located in scripts/build.sh . A Docker container is used to ship pre-configured build environments to developers. It contains necessary library headers and compilers, and requires no user intervention at all. This build process is optimized to be run in cloud CI pipelines on GitHub Actions. This allows us to automatically distribute development master builds to thousands of users without any manual intervention. It lets the team deploy critical fixes to production in a matter of minutes. The automatic CI pipeline is sometimes manually added to other branches in order to provide the community with experimental versions. An automatic system that allows us to enable CI for specific branches might be considered in the future.","title":"Build process"},{"location":"a32nx-dev/overview/#development-practices","text":"FlyByWire Simulations aims to maintain professional standards as well as industry-wide best practices in order to maximize developer productivity and deliver high-quality, tested products. This is why we adopt a set of rules and practices that create a strong framework, not only around the usage of git but also surrounding code quality.","title":"Development practices"},{"location":"a32nx-dev/overview/#version-control","text":"Our version control approach maintains the following guidelines: Commit messages should be short and to the point. The Angular commit message convention is often used and recommended but not enforced at the moment Merge commits are discouraged in commit histories and disallowed when merging pull requests Squash commits are exclusively used for pull request merges One approving review from a maintainer is required to merge a pull request Positive reports from a number of QA testers (varies depending on the PR scope and size) are required before merging, unless a maintainer judges appropriate to bypass this rule Creation of draft pull requests is required when a developer wishes to get working on a project, to avoid duplicate PR situations","title":"Version control"},{"location":"a32nx-dev/overview/#code-quality","text":"Code quality is of an utmost importance as it allows other developers to more easily find bugs and understand logic. An ESLint configuration is provided and should cover most code style rules. A few guidelines apply: Prefer self-documenting code over having to write tons of comments However, do not hesitate to write comments when complex logic is used Use language-specific docstring tools (JSDoc, rustdoc) Maintain separation of concerns Do not be afraid to separate code into logical blocks, even if resulting sub-functions are only used locally (while maintaining a reasonable limit) Avoid polling - prefer reactive APIs (but remain sure of not introducing state that cannot be externally read) Avoid introducing new technologies/languages without talking with the development team Additionally, a few practices are straight up forbidden: Do not use async/await without a good reason (it does not make code run faster unless you are calling threaded APIs like fetch ) Do not use hungarian notation (b, m, g identifier prefixes) Do not perform business logic calculations in presentation code","title":"Code quality"},{"location":"a32nx-dev/overview/#reference-material","text":"Creating a high-fidelity aircraft is a serious task that requires focus and dedication. But more importantly, it's a strive for accuracy and realism. Therefore, any change that affects the appearance or behavior of a plane needs to reference real documentation. The maintainer team has the role of deciding if references are suitable for a change. It is understandable that new developers do not have access to in-depth resource material. While material like that is generally not in the possession of new contributors, the development team is always available to confirm your changes or provide you with necessary info. Our extensive pool of IRL A320/A380 pilots and aircraft maintenance engineers are also able to answer your questions whenever needed.","title":"Reference material"},{"location":"a32nx-dev/overview/#useful-tools","text":"A number of tools make development in Microsoft Flight Simulator easier. msfs-webui-devkit - simple avionics overlay allowing cache-breaking live reload and basic console view","title":"Useful tools"},{"location":"a32nx-dev/react/","text":"A32NX React Overhaul Section 1 This is a placeholder. Section 2 This is another placeholder.","title":"React Overhaul"},{"location":"a32nx-dev/react/#a32nx-react-overhaul","text":"","title":"A32NX React Overhaul"},{"location":"a32nx-dev/react/#section-1","text":"This is a placeholder.","title":"Section 1"},{"location":"a32nx-dev/react/#section-2","text":"This is another placeholder.","title":"Section 2"},{"location":"a32nx-dev/simvars/","text":"A32NX Local SimVars Section 1 This is a placeholder. Section 2 This is another placeholder.","title":"Local SimVars"},{"location":"a32nx-dev/simvars/#a32nx-local-simvars","text":"","title":"A32NX Local SimVars"},{"location":"a32nx-dev/simvars/#section-1","text":"This is a placeholder.","title":"Section 1"},{"location":"a32nx-dev/simvars/#section-2","text":"This is another placeholder.","title":"Section 2"},{"location":"a32nx-dev/xml/","text":"A32NX XML ModelBehaviors Section 1 This is a placeholder. Section 2 This is another placeholder.","title":"XML ModelBehaviors"},{"location":"a32nx-dev/xml/#a32nx-xml-modelbehaviors","text":"","title":"A32NX XML ModelBehaviors"},{"location":"a32nx-dev/xml/#section-1","text":"This is a placeholder.","title":"Section 1"},{"location":"a32nx-dev/xml/#section-2","text":"This is another placeholder.","title":"Section 2"},{"location":"common-dev/blender/","text":"Blender Importer & Exporter Section 1 This is a placeholder. Section 2 This is another placeholder.","title":"Blender Plugin"},{"location":"common-dev/blender/#blender-importer-exporter","text":"","title":"Blender Importer &amp; Exporter"},{"location":"common-dev/blender/#section-1","text":"This is a placeholder.","title":"Section 1"},{"location":"common-dev/blender/#section-2","text":"This is another placeholder.","title":"Section 2"},{"location":"common-dev/efb/","text":"EFB Development Section 1 This is a placeholder. Section 2 This is another placeholder.","title":"EFB"},{"location":"common-dev/efb/#efb-development","text":"","title":"EFB Development"},{"location":"common-dev/efb/#section-1","text":"This is a placeholder.","title":"Section 1"},{"location":"common-dev/efb/#section-2","text":"This is another placeholder.","title":"Section 2"},{"location":"common-dev/installer/","text":"Installer Development Section 1 This is a placeholder. Section 2 This is another placeholder.","title":"Installer"},{"location":"common-dev/installer/#installer-development","text":"","title":"Installer Development"},{"location":"common-dev/installer/#section-1","text":"This is a placeholder.","title":"Section 1"},{"location":"common-dev/installer/#section-2","text":"This is another placeholder.","title":"Section 2"},{"location":"common-dev/msfs-rs/","text":"Rust SDK Development Section 1 This is a placeholder. Section 2 This is another placeholder.","title":"Rust SDK"},{"location":"common-dev/msfs-rs/#rust-sdk-development","text":"","title":"Rust SDK Development"},{"location":"common-dev/msfs-rs/#section-1","text":"This is a placeholder.","title":"Section 1"},{"location":"common-dev/msfs-rs/#section-2","text":"This is another placeholder.","title":"Section 2"},{"location":"common-dev/web-api/","text":"Web API Development Section 1 This is a placeholder. Section 2 This is another placeholder.","title":"Web API"},{"location":"common-dev/web-api/#web-api-development","text":"","title":"Web API Development"},{"location":"common-dev/web-api/#section-1","text":"This is a placeholder.","title":"Section 1"},{"location":"common-dev/web-api/#section-2","text":"This is another placeholder.","title":"Section 2"},{"location":"sdk/docker/","text":"Docker & Build Process First Section This is a placeholder. Second Section This is another placeholder.","title":"Docker & Building"},{"location":"sdk/docker/#docker-build-process","text":"","title":"Docker &amp; Build Process"},{"location":"sdk/docker/#first-section","text":"This is a placeholder.","title":"First Section"},{"location":"sdk/docker/#second-section","text":"This is another placeholder.","title":"Second Section"},{"location":"sdk/html-gauges/","text":"HTML & JavaScript Gauges Code Structure This is a placeholder. Core Files This is another placeholder.","title":"HTML/JS Gauges"},{"location":"sdk/html-gauges/#html-javascript-gauges","text":"","title":"HTML &amp; JavaScript Gauges"},{"location":"sdk/html-gauges/#code-structure","text":"This is a placeholder.","title":"Code Structure"},{"location":"sdk/html-gauges/#core-files","text":"This is another placeholder.","title":"Core Files"},{"location":"sdk/modeling/","text":"Model Creation & Editing Section 1 This is a placeholder. Section 2 This is another placeholder.","title":"Modeling"},{"location":"sdk/modeling/#model-creation-editing","text":"","title":"Model Creation &amp; Editing"},{"location":"sdk/modeling/#section-1","text":"This is a placeholder.","title":"Section 1"},{"location":"sdk/modeling/#section-2","text":"This is another placeholder.","title":"Section 2"},{"location":"sdk/sounds/","text":"Sound Development & WWise Section 1 This is a placeholder. Section 2 This is another placeholder.","title":"Sounds"},{"location":"sdk/sounds/#sound-development-wwise","text":"","title":"Sound Development &amp; WWise"},{"location":"sdk/sounds/#section-1","text":"This is a placeholder.","title":"Section 1"},{"location":"sdk/sounds/#section-2","text":"This is another placeholder.","title":"Section 2"},{"location":"sdk/texturing/","text":"Texture Creation & Editing Section 1 This is a placeholder. Section 2 This is another placeholder.","title":"Texturing"},{"location":"sdk/texturing/#texture-creation-editing","text":"","title":"Texture Creation &amp; Editing"},{"location":"sdk/texturing/#section-1","text":"This is a placeholder.","title":"Section 1"},{"location":"sdk/texturing/#section-2","text":"This is another placeholder.","title":"Section 2"},{"location":"sdk/wasm-gauges/","text":"WASM Gauges with Rust Section 1 This is a placeholder. Section 2 This is another placeholder.","title":"WASM Gauges"},{"location":"sdk/wasm-gauges/#wasm-gauges-with-rust","text":"","title":"WASM Gauges with Rust"},{"location":"sdk/wasm-gauges/#section-1","text":"This is a placeholder.","title":"Section 1"},{"location":"sdk/wasm-gauges/#section-2","text":"This is another placeholder.","title":"Section 2"},{"location":"sdk/xml-rnp/","text":"XML, RNP, and ModelBehaviors Section 1 This is a placeholder. Section 2 This is another placeholder.","title":"XML & RNP"},{"location":"sdk/xml-rnp/#xml-rnp-and-modelbehaviors","text":"","title":"XML, RNP, and ModelBehaviors"},{"location":"sdk/xml-rnp/#section-1","text":"This is a placeholder.","title":"Section 1"},{"location":"sdk/xml-rnp/#section-2","text":"This is another placeholder.","title":"Section 2"},{"location":"start/faq/","text":"Q: Can I download the aircraft in the current state? A: Yes, see Downloads . Q: Where is the plane in-sim? A: The mod is added on top of the default A320neo from Asobo. If you want to uninstall it and revert to the original aircraft, just delete the A32NX folder in your community folder. Q: What are the liveries available? A: All liveries for the default A320 are compatible with the A32NX Mod. You can download some of your favorite liveries at Flightsim.to . Q: When will it be released? A: The project is an ongoing rolling release. See Downloads . Q: When is the next update? A: We don't know, since it depends on many factors. We will announce each Stable build update via discord and our social media: Facebook , Twitter . Q: How do I join the team? A: Head over to A32NX Development Overview and join our Discord to get started. Q: Is it payware? A: No, it is a completely free aircraft, open-source. Q: How do we report bugs? A: Report bugs to us in the Discord server , under the #help channel, or by creating a GitHub issue. Just make sure to search for existing issues first before creating a new one. Q: Why is my version not the same as what I see others using? A: We have two versions, the Stable and Developer (Master). The Stable version is a 'snapshot' of the development which we regard as stable with the current version of the simulator. The Developer build is updated daily and is a constant work in progress and although we test thoroughly each update, minor issues may occur from time to time. If you find this to be the case, you can report these issues in #help in discord or via GitHub Issues (Check there is not an existing issue of the same nature as yours).","title":"Common Questions"},{"location":"start/first-steps/","text":"Starting the A32NX Section 1 This is a placeholder. Section 2 This is another placeholder.","title":"Starting the plane"},{"location":"start/first-steps/#starting-the-a32nx","text":"","title":"Starting the A32NX"},{"location":"start/first-steps/#section-1","text":"This is a placeholder.","title":"Section 1"},{"location":"start/first-steps/#section-2","text":"This is another placeholder.","title":"Section 2"},{"location":"start/installation/","text":"Installation guide Please follow the information on this page to install the FlyByWire Simulations A32NX Mod for Microsoft Flight Simulator 2020 Last Update: February 5, 2021 Downloads A32NX Installer Download the new A32NX installer where you can select either the Stable or Developer build, and download and install the mod directly into your community folder, download here ( source ). Traditional Download Methods Methods Latest Stable Release How to download : Current Stable Version - v0.5.2 This is the recommended stable release, as it has been thoroughly tested. Download the stable release here. You can see the changelog on the releases page: View Here. Unstable Master Branch Build How to download : This has the latest features, but is much more unstable, use at your own risk. Download developer build here. View info about the latest build here. Unstable Master Branch Build (with custom FBW) How to download : This version is the same as the regular master/development version, but with the WIP custom fly-by-wire system. Expect issues with flight directors/autopilot if you intend to use this version. No support will be provided via Discord. Download custom FBW development build here. IMPORTANT: view warnings and info for the custom FBW build here. This version is the same as the regular master/development version, but with the WIP custom fly-by-wire system. Expect issues with flight directors/autopilot if you intend to use this version. No support will be provided via Discord. Installation Please follow ALL steps in this README if you encounter any issues with installation before seeking support. Open the zip that you downloaded from one of the links above, and drag the A32NX folder inside the zip into your Community folder. See below for the location of your Community folder: For the Microsoft Store edition AND/OR Gamepass edition: Copy the \"A32NX\" folder into your community package folder. It is located in: C:\\Users\\[YOURUSERNAME]\\AppData\\Local\\Packages\\Microsoft.FlightSimulator_<RANDOMLETTERS>\\LocalCache\\Packages\\Community . For the Steam edition: Copy the \"A32NX\" folder into your community package folder. It is located in: C:\\Users\\[YOUR USERNAME]\\AppData\\Roaming\\Microsoft Flight Simulator\\Packages\\Community . For the Boxed edition: Copy the \"A32NX\" folder into your community package folder. It is located in: C:\\Users\\[YOUR USERNAME]\\AppData\\Local\\MSFSPackages\\Community . If the above methods do not work: - You can find your community folder by going into FS2020 general options and enabling developer mode. You will see a menu appear on top. Go to tools and virtual file system. Click on watch bases and your community folder will be listed in one of the folders. - Please make sure you're copying the \"A32NX\" folder into your community package folder, NOT the \"flybywiresim-a32nx\" folder. Contributing See A32NX Development Overview Known Issues (Please note that most issues are being worked on and some of them may even be fixed in the master branch) Captain's PFD may occasionally turn off during flight No Smoking switch doesn't use a full range of motion. Automatic ECAM page switching has minor bugs. AP not following flight plan (leaking input values affect, but don't disconnect the AP) [ Workaround: Set dead-zones for your input device higher ] Autopilot goes direct to RWY on APP (same with default A320) [ Workaround: Use DIR to a waypoint or selected heading ] Upper ECAM displays wrong THR levers position / N1 rating. Rudder key bindings not working (you have to set your key binding to rudder axis right and left) Wing dips on landing (due to bad transition to direct law in flare, same with default A320) [ Workaround: Use minimal aileron input on landing ] Black screens / unable to start (conflict with another mod/livery or incorrect installation of the A32NX mod, use the installer ) SimBrief Airframe The FlyByWire Simulations SimBrief airframe with correct weights is available below. \u2708 SimBrief Airframe Link Credits: @viniciusfont","title":"Installation"},{"location":"start/installation/#installation-guide","text":"Please follow the information on this page to install the FlyByWire Simulations A32NX Mod for Microsoft Flight Simulator 2020 Last Update: February 5, 2021","title":"Installation guide"},{"location":"start/installation/#downloads","text":"","title":"Downloads"},{"location":"start/installation/#a32nx-installer","text":"Download the new A32NX installer where you can select either the Stable or Developer build, and download and install the mod directly into your community folder, download here ( source ).","title":"A32NX Installer"},{"location":"start/installation/#traditional-download-methods","text":"Methods Latest Stable Release How to download : Current Stable Version - v0.5.2 This is the recommended stable release, as it has been thoroughly tested. Download the stable release here. You can see the changelog on the releases page: View Here. Unstable Master Branch Build How to download : This has the latest features, but is much more unstable, use at your own risk. Download developer build here. View info about the latest build here. Unstable Master Branch Build (with custom FBW) How to download : This version is the same as the regular master/development version, but with the WIP custom fly-by-wire system. Expect issues with flight directors/autopilot if you intend to use this version. No support will be provided via Discord. Download custom FBW development build here. IMPORTANT: view warnings and info for the custom FBW build here. This version is the same as the regular master/development version, but with the WIP custom fly-by-wire system. Expect issues with flight directors/autopilot if you intend to use this version. No support will be provided via Discord.","title":"Traditional Download Methods"},{"location":"start/installation/#installation","text":"Please follow ALL steps in this README if you encounter any issues with installation before seeking support. Open the zip that you downloaded from one of the links above, and drag the A32NX folder inside the zip into your Community folder. See below for the location of your Community folder: For the Microsoft Store edition AND/OR Gamepass edition: Copy the \"A32NX\" folder into your community package folder. It is located in: C:\\Users\\[YOURUSERNAME]\\AppData\\Local\\Packages\\Microsoft.FlightSimulator_<RANDOMLETTERS>\\LocalCache\\Packages\\Community . For the Steam edition: Copy the \"A32NX\" folder into your community package folder. It is located in: C:\\Users\\[YOUR USERNAME]\\AppData\\Roaming\\Microsoft Flight Simulator\\Packages\\Community . For the Boxed edition: Copy the \"A32NX\" folder into your community package folder. It is located in: C:\\Users\\[YOUR USERNAME]\\AppData\\Local\\MSFSPackages\\Community . If the above methods do not work: - You can find your community folder by going into FS2020 general options and enabling developer mode. You will see a menu appear on top. Go to tools and virtual file system. Click on watch bases and your community folder will be listed in one of the folders. - Please make sure you're copying the \"A32NX\" folder into your community package folder, NOT the \"flybywiresim-a32nx\" folder.","title":"Installation"},{"location":"start/installation/#contributing","text":"See A32NX Development Overview","title":"Contributing"},{"location":"start/installation/#known-issues","text":"(Please note that most issues are being worked on and some of them may even be fixed in the master branch) Captain's PFD may occasionally turn off during flight No Smoking switch doesn't use a full range of motion. Automatic ECAM page switching has minor bugs. AP not following flight plan (leaking input values affect, but don't disconnect the AP) [ Workaround: Set dead-zones for your input device higher ] Autopilot goes direct to RWY on APP (same with default A320) [ Workaround: Use DIR to a waypoint or selected heading ] Upper ECAM displays wrong THR levers position / N1 rating. Rudder key bindings not working (you have to set your key binding to rudder axis right and left) Wing dips on landing (due to bad transition to direct law in flare, same with default A320) [ Workaround: Use minimal aileron input on landing ] Black screens / unable to start (conflict with another mod/livery or incorrect installation of the A32NX mod, use the installer )","title":"Known Issues"},{"location":"start/installation/#simbrief-airframe","text":"The FlyByWire Simulations SimBrief airframe with correct weights is available below. \u2708 SimBrief Airframe Link Credits: @viniciusfont","title":"SimBrief Airframe"}]}